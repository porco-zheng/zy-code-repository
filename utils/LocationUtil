import java.math.BigDecimal;

public class LocationUtil {

    //经纬度
    public static double mLongitude;
    public static double mLatitude;

    /**
     * 计算两地距离
     *
     * @param lat1 距离店纬度
     * @param lng1 距离点经度
     * @param lat2 所在点纬度
     * @param lng2 所在点经度
     * @return 距离
     */
    public static String calculateDistance(double lat1, double lng1, double lat2, double lng2) {
        lat1 = lat1 / 1000000;
        lng1 = lng1 / 1000000;

        double s;
        if (lat1 == lat2 && lng1 == lng2) {
            s = 0;
        } else {
            s = Distance(lat1, lng1, lat2, lng2);
        }

        BigDecimal bd = new BigDecimal(s);
        if (s < 1) {
            bd = bd.setScale(2, BigDecimal.ROUND_HALF_UP);
        } else {
            bd = bd.setScale(0, BigDecimal.ROUND_HALF_UP);
        }
        return bd + "km";
    }

    public static double HaverSin(double theta) {
        double v = Math.sin(theta / 2);
        return v * v;
    }


    static double EARTH_RADIUS = 6371.0;//km 地球半径 平均值，千米

    /// <summary>
    /// 给定的经度1，纬度1；经度2，纬度2. 计算2个经纬度之间的距离。
    /// </summary>
    /// <param name="lat1">经度1</param>
    /// <param name="lon1">纬度1</param>
    /// <param name="lat2">经度2</param>
    /// <param name="lon2">纬度2</param>
    /// <returns>距离（公里、千米）</returns>
    public static double Distance(double lat1, double lon1, double lat2, double lon2) {
        //用haversine公式计算球面两点间的距离。
        //经纬度转换成弧度
        lat1 = ConvertDegreesToRadians(lat1);
        lon1 = ConvertDegreesToRadians(lon1);
        lat2 = ConvertDegreesToRadians(lat2);
        lon2 = ConvertDegreesToRadians(lon2);

        //差值
        double vLon = Math.abs(lon1 - lon2);
        double vLat = Math.abs(lat1 - lat2);

        //h is the great circle distance in radians, great circle就是一个球体上的切面，它的圆心即是球心的一个周长最大的圆。
        double h = HaverSin(vLat) + Math.cos(lat1) * Math.cos(lat2) * HaverSin(vLon);

        double distance = 2 * EARTH_RADIUS * Math.asin(Math.sqrt(h));

        return distance;
    }

    /// <summary>
    /// 将角度换算为弧度。
    /// </summary>
    /// <param name="degrees">角度</param>
    /// <returns>弧度</returns>
    public static double ConvertDegreesToRadians(double degrees) {
        return degrees * Math.PI / 180;
    }

    public static double ConvertRadiansToDegrees(double radian) {
        return radian * 180.0 / Math.PI;
    }

}
